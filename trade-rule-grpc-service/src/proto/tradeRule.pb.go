// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tradeRule.proto

package tradeRule

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TradeRule_RuleType int32

const (
	TradeRule_BUY  TradeRule_RuleType = 0
	TradeRule_SELL TradeRule_RuleType = 1
)

var TradeRule_RuleType_name = map[int32]string{
	0: "BUY",
	1: "SELL",
}

var TradeRule_RuleType_value = map[string]int32{
	"BUY":  0,
	"SELL": 1,
}

func (x TradeRule_RuleType) String() string {
	return proto.EnumName(TradeRule_RuleType_name, int32(x))
}

func (TradeRule_RuleType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_91541b48f87ca11f, []int{0, 0}
}

type TradeRule struct {
	AcctNumber           string             `protobuf:"bytes,1,opt,name=acctNumber,proto3" json:"acctNumber,omitempty"`
	Symbol               string             `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	SellLowPrice         float64            `protobuf:"fixed64,3,opt,name=sellLowPrice,proto3" json:"sellLowPrice,omitempty"`
	SellHighPrice        float64            `protobuf:"fixed64,4,opt,name=sellHighPrice,proto3" json:"sellHighPrice,omitempty"`
	BuyLowPrice          float64            `protobuf:"fixed64,5,opt,name=buyLowPrice,proto3" json:"buyLowPrice,omitempty"`
	BuyHighPrice         float64            `protobuf:"fixed64,6,opt,name=buyHighPrice,proto3" json:"buyHighPrice,omitempty"`
	RuleType             TradeRule_RuleType `protobuf:"varint,7,opt,name=ruleType,proto3,enum=TradeRule_RuleType" json:"ruleType,omitempty"`
	Quantity             int64              `protobuf:"varint,8,opt,name=quantity,proto3" json:"quantity,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *TradeRule) Reset()         { *m = TradeRule{} }
func (m *TradeRule) String() string { return proto.CompactTextString(m) }
func (*TradeRule) ProtoMessage()    {}
func (*TradeRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_91541b48f87ca11f, []int{0}
}

func (m *TradeRule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TradeRule.Unmarshal(m, b)
}
func (m *TradeRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TradeRule.Marshal(b, m, deterministic)
}
func (m *TradeRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradeRule.Merge(m, src)
}
func (m *TradeRule) XXX_Size() int {
	return xxx_messageInfo_TradeRule.Size(m)
}
func (m *TradeRule) XXX_DiscardUnknown() {
	xxx_messageInfo_TradeRule.DiscardUnknown(m)
}

var xxx_messageInfo_TradeRule proto.InternalMessageInfo

func (m *TradeRule) GetAcctNumber() string {
	if m != nil {
		return m.AcctNumber
	}
	return ""
}

func (m *TradeRule) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *TradeRule) GetSellLowPrice() float64 {
	if m != nil {
		return m.SellLowPrice
	}
	return 0
}

func (m *TradeRule) GetSellHighPrice() float64 {
	if m != nil {
		return m.SellHighPrice
	}
	return 0
}

func (m *TradeRule) GetBuyLowPrice() float64 {
	if m != nil {
		return m.BuyLowPrice
	}
	return 0
}

func (m *TradeRule) GetBuyHighPrice() float64 {
	if m != nil {
		return m.BuyHighPrice
	}
	return 0
}

func (m *TradeRule) GetRuleType() TradeRule_RuleType {
	if m != nil {
		return m.RuleType
	}
	return TradeRule_BUY
}

func (m *TradeRule) GetQuantity() int64 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

type TradeRuleRequest struct {
	TradeRule            *TradeRule `protobuf:"bytes,1,opt,name=tradeRule,proto3" json:"tradeRule,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *TradeRuleRequest) Reset()         { *m = TradeRuleRequest{} }
func (m *TradeRuleRequest) String() string { return proto.CompactTextString(m) }
func (*TradeRuleRequest) ProtoMessage()    {}
func (*TradeRuleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_91541b48f87ca11f, []int{1}
}

func (m *TradeRuleRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TradeRuleRequest.Unmarshal(m, b)
}
func (m *TradeRuleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TradeRuleRequest.Marshal(b, m, deterministic)
}
func (m *TradeRuleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradeRuleRequest.Merge(m, src)
}
func (m *TradeRuleRequest) XXX_Size() int {
	return xxx_messageInfo_TradeRuleRequest.Size(m)
}
func (m *TradeRuleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TradeRuleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TradeRuleRequest proto.InternalMessageInfo

func (m *TradeRuleRequest) GetTradeRule() *TradeRule {
	if m != nil {
		return m.TradeRule
	}
	return nil
}

type TradeRuleResponse struct {
	RuleOrderId          string   `protobuf:"bytes,1,opt,name=ruleOrderId,proto3" json:"ruleOrderId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TradeRuleResponse) Reset()         { *m = TradeRuleResponse{} }
func (m *TradeRuleResponse) String() string { return proto.CompactTextString(m) }
func (*TradeRuleResponse) ProtoMessage()    {}
func (*TradeRuleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_91541b48f87ca11f, []int{2}
}

func (m *TradeRuleResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TradeRuleResponse.Unmarshal(m, b)
}
func (m *TradeRuleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TradeRuleResponse.Marshal(b, m, deterministic)
}
func (m *TradeRuleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradeRuleResponse.Merge(m, src)
}
func (m *TradeRuleResponse) XXX_Size() int {
	return xxx_messageInfo_TradeRuleResponse.Size(m)
}
func (m *TradeRuleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TradeRuleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TradeRuleResponse proto.InternalMessageInfo

func (m *TradeRuleResponse) GetRuleOrderId() string {
	if m != nil {
		return m.RuleOrderId
	}
	return ""
}

func init() {
	proto.RegisterEnum("TradeRule_RuleType", TradeRule_RuleType_name, TradeRule_RuleType_value)
	proto.RegisterType((*TradeRule)(nil), "TradeRule")
	proto.RegisterType((*TradeRuleRequest)(nil), "TradeRuleRequest")
	proto.RegisterType((*TradeRuleResponse)(nil), "TradeRuleResponse")
}

func init() { proto.RegisterFile("tradeRule.proto", fileDescriptor_91541b48f87ca11f) }

var fileDescriptor_91541b48f87ca11f = []byte{
	// 318 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x92, 0x4d, 0x4b, 0xc3, 0x40,
	0x10, 0x86, 0xdd, 0xb6, 0xb6, 0xe9, 0x54, 0x6d, 0xbb, 0x05, 0x09, 0x05, 0x25, 0x04, 0x0f, 0x39,
	0x45, 0xa8, 0x08, 0x1e, 0x3c, 0x09, 0x82, 0x42, 0xb0, 0xb2, 0xad, 0x07, 0x8f, 0xd9, 0x64, 0xd1,
	0x40, 0xd2, 0xa4, 0xfb, 0xa1, 0xe4, 0xd7, 0xf9, 0xd7, 0x24, 0xdb, 0x74, 0x93, 0xea, 0x71, 0x9e,
	0x79, 0xe7, 0x63, 0xdf, 0x59, 0x18, 0x4b, 0x1e, 0xc6, 0x8c, 0xa8, 0x94, 0xf9, 0x05, 0xcf, 0x65,
	0xee, 0xfe, 0x74, 0x60, 0xb8, 0xde, 0x33, 0x7c, 0x09, 0x10, 0x46, 0x91, 0x7c, 0x51, 0x19, 0x65,
	0xdc, 0x46, 0x0e, 0xf2, 0x86, 0xa4, 0x45, 0xf0, 0x39, 0xf4, 0x45, 0x99, 0xd1, 0x3c, 0xb5, 0x3b,
	0x3a, 0x57, 0x47, 0xd8, 0x85, 0x13, 0xc1, 0xd2, 0x34, 0xc8, 0xbf, 0x5f, 0x79, 0x12, 0x31, 0xbb,
	0xeb, 0x20, 0x0f, 0x91, 0x03, 0x86, 0xaf, 0xe0, 0xb4, 0x8a, 0x9f, 0x92, 0x8f, 0xcf, 0x9d, 0xa8,
	0xa7, 0x45, 0x87, 0x10, 0x3b, 0x30, 0xa2, 0xaa, 0x34, 0x8d, 0x8e, 0xb5, 0xa6, 0x8d, 0xaa, 0x59,
	0x54, 0x95, 0x4d, 0x9b, 0xfe, 0x6e, 0x56, 0x9b, 0xe1, 0x6b, 0xb0, 0xb8, 0x4a, 0xd9, 0xba, 0x2c,
	0x98, 0x3d, 0x70, 0x90, 0x77, 0xb6, 0x98, 0xf9, 0xe6, 0x95, 0x3e, 0xa9, 0x53, 0xc4, 0x88, 0xf0,
	0x1c, 0xac, 0xad, 0x0a, 0x37, 0x32, 0x91, 0xa5, 0x6d, 0x39, 0xc8, 0xeb, 0x12, 0x13, 0xbb, 0x17,
	0x60, 0xed, 0x2b, 0xf0, 0x00, 0xba, 0x0f, 0x6f, 0xef, 0x93, 0x23, 0x6c, 0x41, 0x6f, 0xf5, 0x18,
	0x04, 0x13, 0xe4, 0xde, 0xc3, 0xc4, 0xb4, 0x26, 0x6c, 0xab, 0x98, 0x90, 0xd8, 0x83, 0xa1, 0x31,
	0x5a, 0xdb, 0x38, 0x5a, 0x40, 0xb3, 0x00, 0x69, 0x92, 0xee, 0x2d, 0x4c, 0x5b, 0xd5, 0xa2, 0xc8,
	0x37, 0x42, 0x9b, 0x50, 0x6d, 0xb6, 0xe4, 0x31, 0xe3, 0xcf, 0x71, 0x7d, 0x87, 0x36, 0x5a, 0x2c,
	0x61, 0xd6, 0x94, 0x15, 0xd1, 0x8a, 0xf1, 0xaf, 0xea, 0xdd, 0x77, 0x30, 0x16, 0x8a, 0x66, 0x89,
	0x6c, 0x4e, 0x3a, 0xf5, 0xff, 0x6e, 0x37, 0xc7, 0xfe, 0xbf, 0x91, 0xb4, 0xaf, 0xbf, 0xc3, 0xcd,
	0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe9, 0xb4, 0x56, 0xba, 0x21, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TradeRuleRpcServiceClient is the client API for TradeRuleRpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TradeRuleRpcServiceClient interface {
	SubmitTradeRule(ctx context.Context, in *TradeRuleRequest, opts ...grpc.CallOption) (*TradeRuleResponse, error)
}

type tradeRuleRpcServiceClient struct {
	cc *grpc.ClientConn
}

func NewTradeRuleRpcServiceClient(cc *grpc.ClientConn) TradeRuleRpcServiceClient {
	return &tradeRuleRpcServiceClient{cc}
}

func (c *tradeRuleRpcServiceClient) SubmitTradeRule(ctx context.Context, in *TradeRuleRequest, opts ...grpc.CallOption) (*TradeRuleResponse, error) {
	out := new(TradeRuleResponse)
	err := c.cc.Invoke(ctx, "/TradeRuleRpcService/submitTradeRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TradeRuleRpcServiceServer is the server API for TradeRuleRpcService service.
type TradeRuleRpcServiceServer interface {
	SubmitTradeRule(context.Context, *TradeRuleRequest) (*TradeRuleResponse, error)
}

func RegisterTradeRuleRpcServiceServer(s *grpc.Server, srv TradeRuleRpcServiceServer) {
	s.RegisterService(&_TradeRuleRpcService_serviceDesc, srv)
}

func _TradeRuleRpcService_SubmitTradeRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradeRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeRuleRpcServiceServer).SubmitTradeRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TradeRuleRpcService/SubmitTradeRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeRuleRpcServiceServer).SubmitTradeRule(ctx, req.(*TradeRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TradeRuleRpcService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "TradeRuleRpcService",
	HandlerType: (*TradeRuleRpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "submitTradeRule",
			Handler:    _TradeRuleRpcService_SubmitTradeRule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tradeRule.proto",
}
